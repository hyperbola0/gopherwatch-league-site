var GWLSpreadsheet = require('@sheets/GWLSpreadsheet');
const googleAuth = require('@mymodules/auth');
const localfs = require('@mymodules/localfs');
const utils = require('@mymodules/utils');
const sanitize = utils.sanitize;
var {google} = require('googleapis');
var fs = require('fs');
const sheetsApi = google.sheets('v4');

// class for round robin tournaments
module.exports = class GWLRoundRobinSpreadsheet extends GWLSpreadsheet {
	// var containing tournament info
	tournaments;
	
	// creates a round robin spreadsheet
	constructor(name, internal, ongoing, spreadsheetId) {
		super(name, internal, ongoing, spreadsheetId);
		this.format = "roundrobin";
		this.className = "GWLRoundRobinSpreadsheet";
		this.meta.hasStats = true;
		this.meta.hasPlayerProfiles = true;
		this.meta.hasTournaments = true;
		this.tournaments = [];
		
		this.teamPageTemplatePath = "/client/Teams/team_roundrobin.html";
	}
	
	// builds the directory structure
	buildDirectory() {
		return new Promise((resolve,reject) => {
			fs.mkdirSync("./data/" + this.internal);
			fs.mkdirSync("./data/" + this.internal + "/teams");
			fs.mkdirSync("./data/" + this.internal + "/tournaments");
			
			// don't cache if this is an ongoing tournament.
			if(this.ongoing) {
				fs.copyFileSync('./gitignore_template', './data/' + this.internal + '/teams/.gitignore');
				fs.copyFileSync('./gitignore_template', './data/' + this.internal + '/.gitignore');
				fs.copyFileSync('./gitignore_template', './data/' + this.internal + '/tournaments/.gitignore');
			}
			resolve(null);
		});
	}
	
	// loads a serialized object into the class
	static loadObject(obj) {
		return new Promise((resolve,reject) => {
			if(obj.format != "roundrobin") {
				console.log("Object is not a GWLRoundRobinSpreadsheet object!");
				reject("InvalidFormat");
			}
			var sheet = new GWLRoundRobinSpreadsheet(obj.name, obj.internal, obj.ongoing, obj.spreadsheetId);
			sheet.teams = obj.teams;
			sheet.tournaments = obj.tournaments;
			resolve(sheet);
		});
	}
	
	// accesses spreadsheet info
	loadSheetInfo() {
		return new Promise((resolve,reject) => {
			googleAuth.authorize()
			.then((auth) => {
				sheetsApi.spreadsheets.values.batchGet({
					auth: auth,
					spreadsheetId: this.spreadsheetId,
					ranges: [
						'Info!A2:F21',			// 1 Team names
						'Info!N4:N10',			// 2 Tournaments
						'Info!I6:I16',			// 3 Tournaments fr
					]
				}, (err, response) => {
					if (err) {
						console.log('The API returned an error: ' + err);
						reject(err);
					}
					
					// store teams
					let teams = response.data.valueRanges[0].values;
					if(teams) teams.map((row) => {
						let obj = {};
						obj.name = row[0];
						obj.internal = row[2];
						obj.iconUrl = row[3];
						obj.primaryColor = row[4];
						obj.secondaryColor = row[5];
						
						// discard if team is invalid (no name or internal name)
						if(obj.name != undefined && obj.name != '' && obj.internal != undefined && obj.internal != '') {
							console.log(`pushing team ${obj.name} to ${this.name}`);
							this.teams.push(obj);
						}
					});
					
					// store tournaments
					let tournaments = response.data.valueRanges[2].values;
					if(tournaments) tournaments.map((row) => {
						this.tournaments.push({ name: row[0], internal: row[0].split(' ').join('_') }); // append tournament
					});
					console.log(this.tournaments);
					resolve(this);
				});
			})
			.catch((err) => {
				console.log('auth error', err);
				reject(err);
			});
		});
	}
	
	// functions for storing data
	_storematchlog(range) {
		return new Promise((resolve,reject) => {
			// store matchlog info
			{
				var json = '{"currentround":';
				json += this.currentRound;
				json += ',"matches":[';
				if(range && range.length) {
					range.map((row) => {
						json += `{"tournament":"${sanitize(row[0])}","played":"${sanitize(row[7])}",`;
						json += `"team1":"${sanitize(row[1])}","team2":"${sanitize(row[2])}",`;
						json += `"division":"${sanitize(row[4])}","date":"${sanitize(row[5])}","time":"${sanitize(row[6])}",`;
						json += `"map1":{"name":"${sanitize(row[8])}","winner":"${sanitize(row[9])}"},`;
						json += `"map2":{"name":"${sanitize(row[10])}","winner":"${sanitize(row[11])}"},`;
						json += `"map3":{"name":"${sanitize(row[12])}","winner":"${sanitize(row[13])}"},`;
						json += `"map4":{"name":"${sanitize(row[14])}","winner":"${sanitize(row[15])}"},`;
						json += `"map5":{"name":"${sanitize(row[16])}","winner":"${sanitize(row[17])}"},`;
						json += `"map6":{"name":"${sanitize(row[18])}","winner":"${sanitize(row[19])}"},`;
						json += `"map7":{"name":"${sanitize(row[20])}","winner":"${sanitize(row[21])}"},`;
						json += `"map8":{"name":"${sanitize(row[22])}","winner":"${sanitize(row[23])}"},`;
						json += `"matchwinner":"${sanitize(row[24])}","vod":"${sanitize(row[25])}","round":"${sanitize(row[26])}"},`;
					});
					
					json = json.replace(/,$/,'');
					json += ']}';
				} else {
					console.log("Pulled an empty MatchLog!");
					json += ']}';
				}
					
				let jsonObj = JSON.parse(json);
				localfs.writeJsonPromise('./data/' + this.internal + '/matchlog.json', jsonObj)
				.then(() => resolve(jsonObj))
				.catch(err => {
					console.log("Error storing matchlog!");
					reject(err);
				});
			}
		});
	}
		
	_storeherostats(rows,league,totals) {
		return new Promise((resolve,reject) => {
			var json = '{"stats":[';
			if(rows && rows.length && league && league.length && totals && totals.length) {
				rows.map((row) => {
					json += `{"player":"${sanitize(row[0])}","hero":"${sanitize(row[1])}",`;
					json += `"elims":"${row[2]}","fb":"${row[3]}",`;
					json += `"damage":"${row[4]}","deaths":"${row[5]}",`;
					json += `"healing":"${row[6]}","blocked":"${row[7]}",`;
					json += `"timeplayed":"${row[8]}","team":"${row[9]}"},`;
				});
				
				league.map((row) => {
					json += `{"player":"${sanitize(row[0])}","hero":"${sanitize(row[1])}",`;
					json += `"elims":"${row[2]}","fb":"${row[3]}",`;
					json += `"damage":"${row[4]}","deaths":"${row[5]}",`;
					json += `"healing":"${row[6]}","blocked":"${row[7]}",`;
					json += `"timeplayed":"${row[8]}","team":"The Gopherwatch League"},`;
				});
				
				json = json.replace(/,$/,'');
				json += '],"averages":{';
				json += `"elims":"${parseFloat(totals[0][0]).toFixed(2)}","elims10":"${parseFloat(totals[1][0]).toFixed(2)}","fb":"${parseFloat(totals[0][1]).toFixed(2)}","fb10":"${parseFloat(totals[1][1]).toFixed(2)}",`;
				json += `"dmg":"${parseFloat(totals[0][2]).toFixed(2)}","dmg10":"${parseFloat(totals[1][2]).toFixed(2)}","deaths":"${parseFloat(totals[0][3]).toFixed(2)}","deaths10":"${parseFloat(totals[1][3]).toFixed(2)}",`;
				json += `"healing":"${parseFloat(totals[0][4]).toFixed(2)}","healing10":"${parseFloat(totals[1][4]).toFixed(2)}","blocked":"${parseFloat(totals[0][5]).toFixed(2)}","blocked10":"${parseFloat(totals[1][5]).toFixed(2)}"}}`;
			} else {
				console.log("Pulled an empty HeroStats!");
				json += ']}';
			}
			
			let jsonObj = JSON.parse(json);
			localfs.writeJsonPromise('./data/' + this.internal + '/herostats.json', jsonObj)
			.then(() => resolve(jsonObj))
			.catch(err => {
				console.log("Error storing HeroStats!");
				reject(err)
			});
		});
	}
		
	_storestandings(range) {
		return new Promise((resolve,reject) => {
			let json = '{"Teams":[';
			if(range && range.length) {
				range.map((row) => {
					json += `{"name":"${sanitize(row[1])}","rank":"${sanitize(row[0])}","points":"${sanitize(row[3])}",`;
					json += `"win":"${sanitize(row[4])}","loss":"${sanitize(row[5])}",`;
					if(row[3]+row[4]==0) {
						json += `"pct":"0%",`;
					} else {
						let winrate = parseInt(row[4])+parseInt(row[5]);
						winrate = parseInt(row[4])/winrate*100;
						winrate = winrate.toFixed(2);
						json += `"pct":"${winrate}%",`;
					}
					json += `"mapwin":"${sanitize(row[7])}","maploss":"${sanitize(row[8])}","maptie":"${sanitize(row[9])}",`;
					json += `"mapdiff":"${sanitize(row[10])}"},`;
				});
				
				json = json.replace(/,$/,'');
				json += ']}';
			} else {
				console.log("Pulled an empty standings!");
				json += ']}';
			}

			var obj = JSON.parse(json);
			localfs.writeJsonPromise('./data/' + this.internal + '/standings.json', obj)
			.then(() => resolve(obj))
			.catch(err => {
				console.log("Error storing standings!");
				reject(err);
			});
		});
	}
		
	_storeplayerinfo(range) {
		return new Promise((resolve,reject) => {
			let json = '{"season":"';
			json += this.name;
			json += '","players":['
			if(range && range.length) {
				range.map((row) => {
					json += '{"battletag":"';
					json += `${sanitize(row[0])}`;
					json += '","team":"';
					json += `${sanitize(row[1])}`;
					json += '","draft":"';
					json += `${sanitize(row[2])}`;
					json += '","tank":"';
					json += `${sanitize(row[9])}`;
					json += '","dps":"';
					json += `${sanitize(row[10])}`;
					json += '","support":"';
					json += `${sanitize(row[11])}`;
					json += `","mvp":"${sanitize(row[12])}","realname":"${sanitize(row[13])}","playernumber":"${sanitize(row[14])}",`;
					json += `"pronouns":"${sanitize(row[15])}","hometown":"${sanitize(row[16])}","major":"${sanitize(row[17])}",`;
					json += `"twitch":"${sanitize(row[18])}","twitter":"${sanitize(row[19])}","youtube":"${sanitize(row[20])}","instagram":"${sanitize(row[21])}","reddit":"${sanitize(row[22])}",`;
					let accolades = row[25];
					if(accolades != undefined) {
						accolades = accolades.split("\n").join("\\n");
					}
					let bio = row[27];
					if(bio != undefined) {
						bio = bio.split("\"").join("\\\"");
						bio = bio.split("\n").join("\\n");
					}
					json += `"role":"${sanitize(row[23])}","hero":"${sanitize(row[24])}","accolades":"${sanitize(row[25])}","picture":"${sanitize(row[26])}","bio":"${sanitize(row[27])}"},`;
				});
				
				json = json.replace(/,$/,'');
				json += ']}';
				
				json = json.split("\"undefined\"").join("\"\"");
			} else {
				console.log('Player info is empty!');
				json += ']}';
			}
			
			let obj = JSON.parse(json);
			localfs.writeJsonPromise('./data/' + this.internal + '/players.json', obj)
			.then(() => {
				console.log("Wrote to './data/' + this.internal + '/players.json'!");
				resolve(obj);
			})
			.catch(err => {
				console.log("Error storing player info!");
				reject(err);
			});
		});
	}
		
	_storeteaminfo(data) {
		return new Promise((resolve,reject) => {
			let offset = 7; // what index team info starts
			for(let i=0; i<this.teams.length; i++) {
				// check the value ranges for the team exist
				if(!data.valueRanges[offset+4*i+3]) {
					reject('Invalid batchGetAll response! data.valueRanges[' + (offset+4*i+3) + '] does not exist!');
				}
				
				// map to variables
				let filename = './data/' + this.internal + '/teams/' + this.teams[i].internal + '.json';
				let roster = data.valueRanges[offset+4*i].values;
				let maps = data.valueRanges[offset+4*i+1].values;
				let matches = data.valueRanges[offset+4*i+2].values;
				let stats = data.valueRanges[offset+4*i+3].values;
				
				// store team name
				let json = '{"name":"';
				json += this.teams[i].name;
				json += '","color1":"';
				json += this.teams[i].primaryColor;
				json += '","color2":"';
				json += this.teams[i].secondaryColor;
				json += '","roster":[';
				
				// store roster
				if(roster && roster.length) {
					roster.map((row) => {
						json += '{"name":"';
						json += `${sanitize(row[0])}`;
						json += '","draft":"';
						json += `${sanitize(row[1])}`;
						json += '","tank":"';
						json += `${sanitize(row[2])}`;
						json += '","damage":"';
						json += `${sanitize(row[3])}`;
						json += '","support":"';
						json += `${sanitize(row[4])}`;
						json += '"},';
					});
					
					json = json.replace(/,$/,'');
					json += '],';
				} else {
					json += '],';
				}
				
				// store maps
				json += '"maps":[';
				if(maps && maps.length) {
					maps.map((row) => {
						json += '{"mapname":"';
						json += `${sanitize(row[0])}`;
						json += '","wins":"';
						json += `${sanitize(row[1])}`;
						json += '","losses":"';
						json += `${sanitize(row[2])}`;
						json += '","draws":"';
						json += `${sanitize(row[3])}`;
						json += '","winrate":"';
						json += `${sanitize(row[4])}`;
						json += '"},';
					});
						
					json = json.replace(/,$/,'');
					json += '],';
				} else {
					json += '],';
				}
				
				// store matches 
				json += '"matches":[';
				if(matches && matches.length) {
					matches.map((row) => {
						json += '{"tournament":"';
						json += `${sanitize(row[0])}`;
						json += '","opponent":"';
						json += `${sanitize(row[1])}`;
						json += '","date":"';
						json += `${sanitize(row[2])}`;
						json += '","time":"';
						json += `${sanitize(row[3])}`;
						json += '","played":"';
						json += `${sanitize(row[4])}",`;
						json += `"map1":{"name":"${sanitize(row[5])}","winner":"${sanitize(row[6])}"},`;
						json += `"map2":{"name":"${sanitize(row[7])}","winner":"${sanitize(row[8])}"},`;
						json += `"map3":{"name":"${sanitize(row[9])}","winner":"${sanitize(row[10])}"},`;
						json += `"map4":{"name":"${sanitize(row[11])}","winner":"${sanitize(row[12])}"},`;
						json += `"map5":{"name":"${sanitize(row[13])}","winner":"${sanitize(row[14])}"},`;
						json += `"map6":{"name":"${sanitize(row[15])}","winner":"${sanitize(row[16])}"},`;
						json += `"map7":{"name":"${sanitize(row[17])}","winner":"${sanitize(row[18])}"},`;
						json += `"map8":{"name":"${sanitize(row[19])}","winner":"${sanitize(row[20])}"},`;
						json += `"winner":"${sanitize(row[21])}",`;
						json += `"division":"${sanitize(row[22])}",`;
						json += `"vod":"${sanitize(row[23])}",`;
						json += `"round":"${sanitize(row[24])}"},`;
					});
						
					json = json.replace(/,$/,'');
					json += '],';
				} else {
					json += '],';
				}
				
				// store stats
				json += '"stats":{';
				if(stats && stats.length) {
					stats.map((row) => {
						json += `"${row[0]}":{`;
						json += `"wins":"${row[1]}","losses":"${row[2]}","mapwins":"${row[3]}","maplosses":"${row[4]}","mapties":"${row[5]}","mapdiff":"${row[6]}","rank":"${row[7]}"},`;
					});
					
					json = json.replace(/,$/,'');
					json += '}}';
				} else {
					json += '}}';
				}
				
				let jsonObj = JSON.parse(json);
				localfs.writeJsonPromise(filename, jsonObj)
				.then(() => {})
				.catch(err => {
					console.log("Error storing team info!");
					reject(err);
				});
			}
			
			resolve("Done!");
		});
	}
	
	// stores tournament info
	_storetournamentinfo(data) {
		return new Promise((resolve,reject) => {
			let offset = 7 + this.teams.length * 4; // offset tournaments start at
			for(let i=0; i<this.tournaments.length; ++i) {
				// map to variables
				let filename = './data/' + this.internal + '/teams/' + this.tournaments[i].internal + '.json';
				let matches = data.valueRanges[offset+i].values;
				
				// start json
				let json = `{"tournament":"${this.tournaments[i].name}","matches":[`;
				
				// store matches
				if(matches && matches.length) {
					matches.map((row) => {
						json += '{"matchid":"';
						json += `${sanitize(row[0])}`;
						json += '","bracketname":"';
						json += `${sanitize(row[1])}`;
						json += '","parent":"';
						json += `${sanitize(row[2])}`;
						json += '","team1":"';
						json += `${sanitize(row[4])}`;
						json += '","team2":"';
						json += `${sanitize(row[5])}`;
						json += '","date":"';
						json += `${sanitize(row[8])}`;
						json += '","time":"';
						json += `${sanitize(row[9])}`;
						json += '","played":"';
						json += `${sanitize(row[10])}`;
						// map results
						json += `","map1":{"name":"${sanitize(row[11])}","winner":"${sanitize(row[12])}"},`;
						json += `"map2":{"name":"${sanitize(row[13])}","winner":"${sanitize(row[14])}"},`;
						json += `"map3":{"name":"${sanitize(row[15])}","winner":"${sanitize(row[16])}"},`;
						json += `"map4":{"name":"${sanitize(row[17])}","winner":"${sanitize(row[18])}"},`;
						json += `"map5":{"name":"${sanitize(row[19])}","winner":"${sanitize(row[20])}"},`;
						json += `"map6":{"name":"${sanitize(row[21])}","winner":"${sanitize(row[22])}"},`;
						json += `"map7":{"name":"${sanitize(row[23])}","winner":"${sanitize(row[24])}"},`;
						json += `"map8":{"name":"${sanitize(row[25])}","winner":"${sanitize(row[26])}"},`;
						json += `"winner":"${sanitize(row[27])}",`;
						json += `"vod":"${sanitize(row[29])}"`;
						json += '},';
					});
					
					json = json.replace(/,$/,'');
					json += ']}';
				} else {
					json += '},';
				}
				console.log(json);
				
				// save json
				let jsonObj = JSON.parse(json);
				localfs.writeJsonPromise('./data/' + this.internal + '/tournaments/' + this.tournaments[i].internal + '.json', jsonObj)
				.then(() => {})
				.catch(err => {
					console.log("Error storing matchlog!");
					reject(err);
				});
			}
			
			resolve("Done!");
		});
	}
	
	// stores link dict 
	storeLinkDict(dict) {
		return new Promise((resolve,reject) => {
			// store the given dict
			localfs.writeJsonPromise(`./data/${this.internal}/linkdict.json`, dict)
			.then(() => resolve("Success!"))
			.catch(err => {
				console.log("Error storing dictionary");
				reject(err);
			});
		});
	}
	
	getLinkDict() {
		return new Promise((resolve,reject) => {
			localfs.openJsonPromise(`./data/${this.internal}/linkdict.json`)
			.then(obj => resolve(obj))
			.catch(err => reject(err));
		});
	}
	
	// stores data captured by batchGetAll
	storeBatchGet(data) {
		return new Promise((resolve,reject) => {
			console.log("Storing the BatchGet request for " + this.name)
			this.currentRound = parseInt(data.valueRanges[6].values[0][0]);
			// store matchlog info
			this._storematchlog(data.valueRanges[0].values)
			.then(() => this._storeherostats(data.valueRanges[1].values, data.valueRanges[2].values, data.valueRanges[3].values))
			.then(() => this._storestandings(data.valueRanges[4].values))
			.then(() => this._storeplayerinfo(data.valueRanges[5].values))
			.then(() => this._storeteaminfo(data))
			.then(() => this._storetournamentinfo(data))
			.then(res => {
				console.log('Batch get for ' + this.name + ' complete!');
				resolve(this);
			})
			.catch(err => {
				localfs.writeJsonPromise('./error.json', data.valueRanges)
				.then(() => console.log("Error-prone data saved to ./error.json!"))
				.catch(e2 => {
					console.log("Error writing response to error.json! printing in console");
					console.log(data.valueRanges);
				});
				reject(err);
			});
		});
	}
	
	// batch get all info for sheet
	batchGetAll() {
		return new Promise((resolve,reject) => {
			// calculate length of standings
			let lastStandingsRow = this.teams.length + 22;
			// generate ranges
			let ranges = [];
			ranges.push('MatchLog!A2:AA361');
			ranges.push('HeroStats!A2:J2000');
			ranges.push('HeroStats!L2:T33');
			ranges.push('HeroStats!N34:S35');
			ranges.push(`Standings!A23:K${lastStandingsRow}`);
			ranges.push('PlayerInfo!A2:AC200');
			ranges.push('Info!H3');
			for(let i=0; i<this.teams.length; i++) {
				ranges.push(this.teams[i].internal + '!A5:L14') // roster
				ranges.push(this.teams[i].internal + '!F70:J88') // map stats
				ranges.push(this.teams[i].internal + '!A32:Y67') // match history
				ranges.push(this.teams[i].internal + '!J17:Q20') // team stats
			}
			for(let i=0;i<this.tournaments.length; i++) {
				ranges.push('\'' + this.tournaments[i].name + '\'!A2:AD34') // push tournaments
			}
			console.log(ranges);
			
			// get data on all ranges
			googleAuth.authorize()
			.then((auth) => {
				sheetsApi.spreadsheets.values.batchGet({
					auth: auth,
					spreadsheetId: this.spreadsheetId,
					ranges: ranges
				}, (err, response) => {
					if (err) {
						console.log('The API returned an error: ' + err);
						reject(err);
					}
					//localfs.writeJsonPromise('./'+this.internal+'.json',response)
					this.storeBatchGet(response.data)
					.then(re => utils.printMessage("storeBatchGet done for sheet " + this.name, re))
					.then(res => resolve(res))
					.catch(err => reject(err));
				});
			})
			.catch((err) => {
				reject(err);
			});
		});
	}

	getPlayerInfo(battletag) {
		return new Promise((resolve,reject) => {
			localfs.openJsonPromise('./data/' + this.internal + '/players.json')
			.then(res => utils.getPlayerFromObj(res, battletag))
			.then(res2 => resolve(res2))
			.catch(err => reject(err));
		});
	}
	
	getPlayers() {
		return new Promise((resolve,reject) => {
			localfs.openJsonPromise('./data/' + this.internal + '/players.json')
			.then(res => resolve(res))
			.catch(err => reject(err));
		});
	}
	
	getStandings() {
		return new Promise((resolve,reject) => {
			localfs.openJsonPromise('./data/' + this.internal + '/standings.json')
			.then(res => resolve(res))
			.catch(err => reject(err));
		});
	}
	
	getTeamInfo(team) {
		return new Promise((resolve,reject) => {
			localfs.openJsonPromise("./data/" + this.internal + "/teams/" + team + ".json")
			.then(data => resolve(data))
			.catch(err => reject(err));
		});
	}
	
	getMatches() {
		return new Promise((resolve,reject) => {
			localfs.openJsonPromise("./data/" + this.internal + "/matchlog.json")
			.then(res => resolve(res))
			.catch(err => reject(err));
		});
	}
	
	getHeroStats() {
		return new Promise((resolve,reject) => {
			localfs.openJsonPromise("./data/" + this.internal + "/herostats.json")
			.then(res => resolve(res))
			.catch(err => reject(err));
		});
	}
	
	getTournamentInfo(tournament) {
		return new Promise((resolve,reject) => {
			localfs.openJsonPromise("./data/" + this.internal + "/tournaments/" + tournament + ".json")
			.then(data => resolve(data))
			.catch(err => reject(err));
		});
	}
}